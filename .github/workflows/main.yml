name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  CI-CD:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Latest Repo
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 브랜치명 확인
      run: |
        echo "브랜치명: ${GITHUB_REF#refs/heads/}"


    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Create application.yml from secret
      run: |
        mkdir -p src/main/resources
        echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml
    - name: Create keystore from secret and set permissions
      run: |
        echo "${{ secrets.KEYSTORE }}" | base64 --decode > src/main/resources/keystore.p12
        chmod 600 src/main/resources/keystore.p12
        
    - name: Build with Gradle
      run: ./gradlew clean build -x test

    - name: Docker login
      run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    - name: Docker build
      run: |
        docker build -t com-us-server .
        docker tag com-us-server hysong4u/com-us-server:latest
        docker push hysong4u/com-us-server:latest
    - name: Get timestamp
      uses: gerred/actions/current-time@master
      id: current-time

    - name: Run string replace
      uses: frabert/replace-string-action@master
      id: format-time
      with:
        pattern: '[:\.]+'
        string: "${{ steps.current-time.outputs.time }}"
        replace-with: '-'
        flags: 'g'

    - name: Deploy to EC2 (Blue/Green)
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        SERVER_ADDRESS: ${{ secrets.EC2_SERVER_ADDRESS }}
      run: |
        # SSH를 사용하여 EC2 서버에 접속
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        ssh -T -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$SERVER_ADDRESS << 'EOF'

          # 최신 이미지 다운로드
          echo "Pulling the latest Docker image..."
          docker pull hysong4u/com-us-server:latest

          # 기존 Green 컨테이너가 실행 중인 경우 중지 및 제거
          if [ $(docker ps -q -f name=com-us-server-green) ]; then
            echo "Stopping and removing existing Green container..."
            docker stop com-us-server-green && docker rm com-us-server-green
          fi

          # 기존 Blue 컨테이너가 실행 중인 경우 중지 및 제거
          if [ $(docker ps -q -f name=com-us-server-blue) ]; then
            echo "Stopping and removing existing Blue container..."
            docker stop com-us-server-blue && docker rm com-us-server-blue
          fi

          # 새로운 Green 컨테이너 실행 (기존 포트로 실행)
          echo "Starting new Green container on port 443..."
          docker run -d --name com-us-server-green -p 443:443 hysong4u/com-us-server:latest

          # 컨테이너 상태 확인
          timeout=0
          max_attempts=30
          while [ $timeout -lt $max_attempts ]; do
            if [ $(docker ps -q -f name=com-us-server-green) ]; then
              echo "✅ Green container is running. Proceeding with traffic switch."
              docker rename com-us-server-green com-us-server-blue
              break
            fi
            timeout=$((timeout + 1))
            echo "Waiting for Green container to start... attempt $timeout"
            sleep 5
          done

          if [ $timeout -ge $max_attempts ]; then
            echo "❌ Green container failed to start. Keeping old version."
            docker logs com-us-server-green
            docker rm -f com-us-server-green
            exit 1
          fi

          # 불필요한 이미지 정리
          docker image prune -f

        EOF

    #- name: Deploy to EC2
      #env:
        #PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        #SERVER_ADDRESS: ${{ secrets.EC2_SERVER_ADDRESS }}
      #run: |
        #echo "$PRIVATE_KEY" > private_key.pem
        #chmod 600 private_key.pem
        #ssh -T -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$SERVER_ADDRESS << 'EOF'
          #docker pull hysong4u/com-us-server:latest
          #existing_container_id=$(sudo docker ps -q --filter "publish=443")
          #[ -n "$existing_container_id" ] && sudo docker stop $existing_container_id && sudo docker rm $existing_container_id
          #sudo docker image prune -f
          #docker run -d -p 443:443 hysong4u/com-us-server:latest
        #EOF
        # docker 권한 문제 발생시
        # sudo chmod 660 /var/run/docker.sock
        # sudo /usr/sbin/usermod -aG docker $USER
        # sudo /usr/sbin/usermod -aG docker ubuntu
